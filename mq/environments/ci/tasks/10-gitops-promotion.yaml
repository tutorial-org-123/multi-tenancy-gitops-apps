apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-gitops-promotion
  annotations:
    description: Promote deliverables across environments
    app.openshift.io/description: Promote deliverables across environments
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    app.openshift.io/vcs-ref: master
  labels:
    version: 0.0.0
spec:
  params:
    - name: app-name
      default: ""
    - name: version
      default: ""
    - name: src-environment
      default: ""
    - name: dest-environment
      default: ""
    - name: app-path
      default: ""
    - name: source-dir
      default: /source
    - name: subdir
      default: ""
    - name: parentdir
      default: ""
    - name: yaml
      default: "requirements.yaml"
    - name: helm-url
      default: ""
    - name: git-pr
      default: "false"
    - name: tools-image
      default: quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4
  volumes:
    - name: source
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - name: source
        mountPath: $(params.source-dir)
  steps:
    - name: gitops
      image: $(params.tools-image)
      workingDir: $(params.source-dir)
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: HOME
          value: /home/devops
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: username
              optional: true
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: password
              optional: true
        - name: GIT_PARENT_DIR
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: parentdir
              optional: true
        - name: GIT_PROTOCOL
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: protocol
              optional: true
        - name: GIT_HOST
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: host
              optional: true
        - name: GIT_ORG
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: org
              optional: true
        - name: GIT_REPO
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: repo
              optional: true
        - name: GIT_BRANCH
          valueFrom:
            configMapKeyRef:
              name: gitops-repo
              key: branch
              optional: true
      script: |
          #!/usr/bin/env bash
          set -ex
          APP_NAME="$(params.app-name)"
          SUBDIR="$(params.subdir)"
          if [[ -z "${SUBDIR}" ]]; then
            SUBDIR="${APP_NAME}"
          fi
          if [[ -n "$(params.parentdir)" ]]; then
            if [[ -n "$(params.src-environment)" ]]; then
              PARENT_DIR_SRC="$(params.parentdir)/$(params.app-path)/$(params.src-environment)/${SUBDIR}/${SUBDIR}"
            fi
            if [[ -n "$(params.dest-environment)" ]]; then
              PARENT_DIR_DEST="$(params.parentdir)/$(params.app-path)/$(params.dest-environment)/${SUBDIR}/${SUBDIR}"
            else
              echo "Please set destination environment"
            fi
          elif [[ -n "${GIT_PARENT_DIR}" ]] && [[ "${GIT_PARENT_DIR}" = "bash -c"* ]]; then
            if [[ -n "$(params.src-environment)" ]]; then
              PARENT_DIR_SRC=$(eval $GIT_PARENT_DIR | tail -n 1)"/$(params.app-path)/$(params.src-environment)/${SUBDIR}/${SUBDIR}"
            fi
            if [[ -n "$(params.dest-environment)" ]]; then
              PARENT_DIR_DEST=$(eval $GIT_PARENT_DIR | tail -n 1)"/$(params.app-path)/$(params.dest-environment)/${SUBDIR}/${SUBDIR}"
            else
              echo "Please set destination environment"
            fi
          elif [[ -n "${GIT_PARENT_DIR}" ]]; then
            if [[ -n "$(params.src-environment)" ]]; then
              PARENT_DIR_SRC="${GIT_PARENT_DIR}/$(params.app-path)/$(params.src-environment)/${SUBDIR}/${SUBDIR}"
            fi
            if [[ -n "$(params.dest-environment)" ]]; then
              PARENT_DIR_DEST="${GIT_PARENT_DIR}/$(params.app-path)/$(params.dest-environment)/${SUBDIR}/${SUBDIR}"
            else
              echo "Please set destination environment"
            fi
          else
            if [[ -n "$(params.src-environment)" ]]; then
              PARENT_DIR_SRC="."
            fi
            if [[ -n "$(params.dest-environment)" ]]; then
              PARENT_DIR_DEST="."
            else
              echo "Please set destination environment"
            fi
          fi
          if [[ -n "$(params.src-environment)" ]]; then
            SUBDIR_SRC="${PARENT_DIR_SRC}"
          fi
          if [[ -n "$(params.dest-environment)" ]]; then
            SUBDIR_DEST="${PARENT_DIR_DEST}"
          else
            echo "Please set destination environment"
          fi
          PROTOCOL="${GIT_PROTOCOL}"
          if [[ -z "${PROTOCOL}" ]]; then
            PROTOCOL="https"
          fi
          if [[ -z "${GIT_HOST}" ]] || [[ -z "${GIT_ORG}" ]] || [[ -z "${GIT_REPO}" ]]; then
              echo "GitOps repo has not been configured with confimap gitops-repo. Skipping trigger step"
              exit 0
          fi
          set +x
          if [[ -n "${GIT_USERNAME}" ]]; then
            GIT_AUTH_USER="${GIT_USERNAME}"
            GIT_AUTH_PWD="${GIT_PASSWORD}"
          else
            echo "Credentials for GitOps repo not set in secret gitops-cd-secret or git-credentials"
            exit 1
          fi
          set -x
          BRANCH_CMD=""
          if [[ -n "${GIT_BRANCH}" ]]; then
            BRANCH_CMD="-b ${GIT_BRANCH}"
          fi
          git config --global user.email "gitops@cloudnativetoolkit.dev"
          git config --global user.name "Cloud Native Toolkit Pipeline"
          echo "git clone ${BRANCH_CMD} ${PROTOCOL}://${GIT_AUTH_USER}:xxxx@${GIT_HOST}/${GIT_ORG}/${GIT_REPO}"
          set +x
          GIT_URL="${PROTOCOL}://${GIT_AUTH_USER}:${GIT_AUTH_PWD}@${GIT_HOST}/${GIT_ORG}/${GIT_REPO}"
          git clone ${BRANCH_CMD} ${GIT_URL} gitops_cd
          set -x
          cd gitops_cd

          echo ${SUBDIR_SRC}
          echo ${SUBDIR_DEST}

          if [[ ! -z "${SUBDIR_DEST}" ]]; then
            rm -rf "${SUBDIR_DEST}/*"
          fi

          cp -r "${SUBDIR_SRC}"/*.yaml "${SUBDIR_DEST}"

          APP_VERSION="$(git rev-parse HEAD | cut -c 1-8)"

          if [[ $(git status -s | wc -l) -eq 0 ]]; then
            echo "No changes"
            exit 0
          elif [[ "$(params.git-pr)" = "false" ]]; then
            git add .
            git commit -m "Updates ${APP_NAME} to ${VERSION}"
            git push -v
          else
            git checkout -b cntk-ci-pipeline-${APP_NAME}-${APP_VERSION}

            # push changes to git
            git status
            git add "${SUBDIR_DEST}/"
            git commit -m "Cloudnative toolkit pipeline updates ${APP_NAME}" --no-edit --signoff

            git push origin cntk-ci-pipeline-${APP_NAME}-${APP_VERSION}

            GIT_PUSH_URL="${PROTOCOL}://api.github.com/repos/${GIT_ORG}/${GIT_REPO}/pulls"
            curl -u ${GIT_AUTH_USER}:${GIT_AUTH_PWD} -d '{"title":"PR to promote to '$(params.dest-environment)' for '$(params.app-name)'","base":"'${GIT_BRANCH}'", "head":"'${GIT_ORG}':cntk-ci-pipeline-'${APP_NAME}'-'${APP_VERSION}'"}' ${GIT_PUSH_URL}

          fi
